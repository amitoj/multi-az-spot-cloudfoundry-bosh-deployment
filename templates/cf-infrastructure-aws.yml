meta:
  zones:
    z1: (( properties.template_only.aws.availability_zone ))
    z2: (( properties.template_only.aws.availability_zone2 ))

  fog_config:
    provider: AWS
    aws_access_key_id: (( properties.template_only_aws_credentials.access_key_id ))
    aws_secret_access_key: (( properties.template_only_aws_credentials.secret_access_key ))

  stemcell:
    name: bosh-aws-xen-ubuntu
    version: latest


properties:
  template_only: (( merge ))
  template_only_aws_credentials: (( merge ))
  
  logger_endpoint:
    port: 4443

  loggregator:
    blacklisted_syslog_ranges:
    - start: 10.10.16.0
      end: 10.10.31.255
    - start: 10.10.80.0
      end: 10.10.95.255

  cc:
    resource_pool:
      fog_connection: (( meta.fog_config ))
    packages:
      fog_connection: (( meta.fog_config ))
    droplets:
      fog_connection: (( meta.fog_config ))
    buildpacks:
      fog_connection: (( meta.fog_config ))

  uaa:
    catalina_opts: -Xmx768m -XX:MaxPermSize=256m

  login:
    catalina_opts: -Xmx768m -XX:MaxPermSize=256m

  dea_next:
    deny_networks:
      - 169.254.0.0/16 # AWS Status
      - 10.10.0.0/24 # BOSH network
      - (( networks.cf1.subnets.[0].range ))
      - (( networks.cf2.subnets.[0].range ))

    allow_networks:
      - 10.10.0.2/32 # Amazon DNS

  ccdb:
    db_scheme: postgres
    address: (( properties.databases.address ))
    port: 5524
    roles:
      - tag: admin
        name: ccadmin
        password: admin
    databases:
      - tag: cc
        name: ccdb
        citext: true

  uaadb:
    db_scheme: postgresql
    address: (( properties.databases.address ))
    port: 5524
    roles:
      - tag: admin
        name: uaaadmin
        password: admin
    databases:
      - tag: uaa
        name: uaadb
        citext: true

  databases:
    db_scheme: postgres
    address: (( jobs.postgres_z1.networks.cf1.static_ips.[0] ))
    port: 5524
    roles:
      - tag: admin
        name: ccadmin
        password: admin
      - tag: admin
        name: uaaadmin
        password: admin
    databases:
      - tag: cc
        name: ccdb
        citext: true
      - tag: uaa
        name: uaadb
        citext: true

compilation:
  cloud_properties:
    instance_type: c1.medium
    availability_zone: (( meta.zones.z1 ))

networks:
  - name: cf1
    type: manual
    subnets:
      - range: 10.10.16.0/20
        name: default_unused
        reserved:
          - 10.10.16.2 - 10.10.16.9
        static:
          - 10.10.16.10 - 10.10.16.255
        gateway: 10.10.16.1
        dns:
          - 10.10.0.2 # amazon has only 1 DNS server for the whole VPC at x.x.0.2
        cloud_properties:
          security_groups:
            - cf
          subnet: (( properties.template_only.aws.subnet_ids.cf1 ))

  - name: cf2
    type: manual
    subnets:
      - range: 10.10.80.0/20
        name: default_unused
        reserved:
          - 10.10.80.2 - 10.10.80.9
        static:
          - 10.10.80.10 - 10.10.80.255
        gateway: 10.10.80.1
        dns:
          - 10.10.0.2 # amazon has only 1 DNS server for the whole VPC at x.x.0.2
        cloud_properties:
          security_groups:
            - cf
          subnet: (( properties.template_only.aws.subnet_ids.cf2 ))


resource_pools:
  - name: small_z1
    cloud_properties:
      instance_type: m1.small
      availability_zone: (( meta.zones.z1 ))

  - name: small_z2
    cloud_properties:
      instance_type: m1.small
      availability_zone: (( meta.zones.z2 ))

  - name: medium_z1
    cloud_properties:
      instance_type: m1.medium
      availability_zone: (( meta.zones.z1 ))

  - name: medium_z2
    cloud_properties:
      instance_type: m1.medium
      availability_zone: (( meta.zones.z2 ))

  - name: large_z1
    cloud_properties:
      instance_type: m1.large
      availability_zone: (( meta.zones.z1 ))

  - name: large_z2
    cloud_properties:
      instance_type: m1.large
      availability_zone: (( meta.zones.z2 ))

  - name: runner_z1
    cloud_properties:
      instance_type: m1.large
      availability_zone: (( meta.zones.z1 ))

  - name: runner_z2
    cloud_properties:
      instance_type: m1.large
      availability_zone: (( meta.zones.z2 ))

  - name: router_z1
    cloud_properties:
      instance_type: m1.medium
      availability_zone: (( meta.zones.z1 ))
      elbs: (( merge || ["cfrouter"] ))

  - name: router_z2
    cloud_properties:
      instance_type: m1.medium
      availability_zone: (( meta.zones.z2 ))
      elbs: (( merge || ["cfrouter"] ))


# set up static IPs
jobs:
  - name: logs_z1
    instances: 0
    networks:
      - name: cf1
        static_ips: (( static_ips(0) ))

  - name: logs_z2
    instances: 0
    networks:
      - name: cf2
        static_ips: (( static_ips(0) ))

  - name: nats_z1
    instances: 0
    networks:
      - name: cf1
        static_ips: (( static_ips(1) ))

  - name: nats_z2
    instances: 1
    networks:
      - name: cf2
        static_ips: (( static_ips(1) ))

  - name: router_z1
    instances: 1
    networks:
      - name: cf1
        static_ips: (( static_ips(5, 6, 15, 16, 17, 18, 19, 20) ))

  - name: router_z2
    instances: 1
    networks:
      - name: cf2
        static_ips: (( static_ips(5, 6, 15, 16, 17, 18, 19, 20) ))

  - name: loggregator_z1
    instances: 2
    networks:
      - name: cf1
        static_ips: (( static_ips(21, 22) ))

  - name: loggregator_z2
    instances: 2
    networks:
      - name: cf2
        static_ips: (( static_ips(21, 22) ))

  - name: loggregator_trafficcontroller_z1
    instances: 1
    networks:
      - name: cf1
        static_ips: (( static_ips(24) ))

  - name: loggregator_trafficcontroller_z2
    instances: 1
    networks:
      - name: cf2
        static_ips: (( static_ips(24) ))

  - name: etcd_leader_z1
    instances: 1
    networks:
      - name: cf1
        static_ips: (( static_ips(9) ))

  - name: etcd_z1
    instances: 1
    networks:
      - name: cf1
        static_ips: (( static_ips(10) ))

  - name: etcd_z2
    instances: 1
    networks:
      - name: cf2
        static_ips: (( static_ips(9) ))

 # SPOFs
  - name: postgres_z1
    instances: 1
    networks:
    - name: cf1
      static_ips: (( static_ips(7) ))
  - name: ha_proxy_z1
    instances: 1
    networks:
      - name: cf1
        static_ips: (( static_ips(8) ))
    properties:
      ha_proxy:
        ssl_pem: |
          -----BEGIN CERTIFICATE-----
          MIICLzCCAZgCCQCSoIG3LoeSMTANBgkqhkiG9w0BAQUFADBcMQswCQYDVQQGEwJV
          UzELMAkGA1UECBMCQ0ExFjAUBgNVBAcTDVNhbiBGcmFuY2lzY28xEDAOBgNVBAoT
          B1Bpdm90YWwxFjAUBgNVBAsTDUNsb3VkIEZvdW5kcnkwHhcNMTMxMDE3MjMxNzM5
          WhcNMTQxMDE3MjMxNzM5WjBcMQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExFjAU
          BgNVBAcTDVNhbiBGcmFuY2lzY28xEDAOBgNVBAoTB1Bpdm90YWwxFjAUBgNVBAsT
          DUNsb3VkIEZvdW5kcnkwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBANqyjJMH
          FDbJ4XM2vLRxz6i82Gd2Y2dnAKYgu67FgheHGQJSv38lvn8JrAOBXu2QJgP8sJa+
          XqUWUTMo9BWvhvedQLojtcpLdULc0FhlIXn8bThGlTQyrSg9QJobhQZGziFVrdQM
          UZy4X+s6A2Szb9iOg3TYibnnfnuvdZli83eRAgMBAAEwDQYJKoZIhvcNAQEFBQAD
          gYEAbFu65WT+czpiJqHhNz5AnGYA8kieVlV7KhcljLtsU4Sxut5Vq9uXFBE09KCg
          YkyZ9KfzXArTeRCfcbm5xq12I+1nf6q0QjT1y3P6ztax0rpyb0i+4GWvA+ruMhfx
          n4QM1MkiJVYBGKkXFZDd1zsdR3pY4vm1uiMY75IvJQfgb08=
          -----END CERTIFICATE-----
          -----BEGIN RSA PRIVATE KEY-----
          MIICXQIBAAKBgQDasoyTBxQ2yeFzNry0cc+ovNhndmNnZwCmILuuxYIXhxkCUr9/
          Jb5/CawDgV7tkCYD/LCWvl6lFlEzKPQVr4b3nUC6I7XKS3VC3NBYZSF5/G04RpU0
          Mq0oPUCaG4UGRs4hVa3UDFGcuF/rOgNks2/YjoN02Im55357r3WZYvN3kQIDAQAB
          AoGAa88G81fTBCtDA1vhbIaKWuE1QNOgrxGcxUhvnPlqZxTHJFkMY66EmPV4oYW9
          +RhNVTvVBYq092boAnNW1/Xebvrk1SnBDkrLntnGPmExkatOkPTFFlNXfePu6qOJ
          ULwYg8rKRwpvLoQXxbzMDXApPBifBNWGHVneGuHLpwPEQgECQQD0IJOecEyorrCR
          6+wmJBS/IwqQO0Ooj7kZEg65MHi9exVe+XFvP0lW2NAUsDuBLz79hjslSqIJjRG8
          c6q36oqhAkEA5VVeEip+T4DV12I5A5maGexVMeC92K7EGU/H8YhltxVZ/RtNngdT
          3r19WeDbDF7R5CJy2f7AYullk3S6fkk28QJBALdEiW1k4rezRMyW7tYHOifvN2vl
          gbpWAt/GRZVSxSGB+B4vZq/cM8NlynftgQ5PGJucnGQ3bgN7irgNoTimc2ECQFMX
          QBMy5DroAhKcmu2r/IKB90gwFnjosVI+bsIbWkcgbE9hUhj8rK2aWE11Q8hSnpea
          x6QmQgxUZiIr+9n/qvECQQDiDIeSmo2mRYsaqr4CQ3Ak+EDjsm9XTpXHuqm+xgFO
          iDIeQCWd3/twqdDTR7FaDE7Q0i559u7A1yLumUn8caLF
          -----END RSA PRIVATE KEY-----

meta:
  zones:
    z1: (( properties.template_only.aws.availability_zone ))
    z2: (( properties.template_only.aws.availability_zone2 ))

  fog_config:
    provider: AWS
    path_style: true # allow . in the S3 bucket names
    aws_access_key_id: (( properties.template_only_aws_credentials.access_key_id ))
    aws_secret_access_key: (( properties.template_only_aws_credentials.secret_access_key ))
    region: (( properties.template_only.aws.region ))

  stemcell:
    name: bosh-aws-xen-ubuntu
    version: latest


properties:
  template_only: (( merge ))
  template_only_aws_credentials: (( merge ))

  logger_endpoint:
    port: 4443

  loggregator:
    blacklisted_syslog_ranges:
    - start: 10.10.16.0
      end: 10.10.31.255
    - start: 10.10.80.0
      end: 10.10.95.255

  cc:
    resource_pool:
      fog_connection: (( meta.fog_config ))
    packages:
      fog_connection: (( meta.fog_config ))
    droplets:
      fog_connection: (( meta.fog_config ))
    buildpacks:
      fog_connection: (( meta.fog_config ))

  uaa:
    catalina_opts: -Xmx768m -XX:MaxPermSize=256m

  login:
    catalina_opts: -Xmx768m -XX:MaxPermSize=256m

  dea_next:
    deny_networks:
      - 169.254.0.0/16 # AWS Status
      - 10.10.0.0/24 # BOSH network
      - (( networks.cf1.subnets.[0].range ))
      - (( networks.cf2.subnets.[0].range ))

    allow_networks:
      - 10.10.0.2/32 # Amazon DNS

  ccdb:
    db_scheme: postgres
    address: (( properties.databases.address ))
    port: 5524
    roles:
      - tag: admin
        name: ccadmin
        password: admin
    databases:
      - tag: cc
        name: ccdb
        citext: true

  uaadb:
    db_scheme: postgresql
    address: (( properties.databases.address ))
    port: 5524
    roles:
      - tag: admin
        name: uaaadmin
        password: admin
    databases:
      - tag: uaa
        name: uaadb
        citext: true

  databases:
    db_scheme: postgres
    address: (( jobs.postgres_z1.networks.cf1.static_ips.[0] ))
    port: 5524
    roles:
      - tag: admin
        name: ccadmin
        password: admin
      - tag: admin
        name: uaaadmin
        password: admin
    databases:
      - tag: cc
        name: ccdb
        citext: true
      - tag: uaa
        name: uaadb
        citext: true

compilation:
  cloud_properties:
    instance_type: c1.medium
    availability_zone: (( meta.zones.z1 ))

default_networks:
  - name: floating
    type: vip
    cloud_properties: {}

  - name: cf1_public
    type: manual
    subnets:
      - range: 10.10.1.0/20
        name: default_unused
        reserved:
          - 10.10.1.2 - 10.10.1.9
        static:
          - 10.10.1.10 - 10.10.1.255
        gateway: 10.10.1.1
        dns:
          - 10.10.0.2 # amazon has only 1 DNS server for the whole VPC at x.x.0.2
        cloud_properties:
          security_groups:
            - cf
          subnet: (( properties.template_only.aws.subnet_ids.cf1_public ))
  - name: cf1
    type: manual
    subnets:
      - range: 10.10.16.0/20
        name: default_unused
        reserved:
          - 10.10.16.2 - 10.10.16.9
        static:
          - 10.10.16.10 - 10.10.16.255
        gateway: 10.10.16.1
        dns:
          - 10.10.0.2 # amazon has only 1 DNS server for the whole VPC at x.x.0.2
        cloud_properties:
          security_groups:
            - cf
          subnet: (( properties.template_only.aws.subnet_ids.cf1 ))

  - name: cf2
    type: manual
    subnets:
      - range: 10.10.80.0/20
        name: default_unused
        reserved:
          - 10.10.80.2 - 10.10.80.9
        static:
          - 10.10.80.10 - 10.10.80.255
        gateway: 10.10.80.1
        dns:
          - 10.10.0.2 # amazon has only 1 DNS server for the whole VPC at x.x.0.2
        cloud_properties:
          security_groups:
            - cf
          subnet: (( properties.template_only.aws.subnet_ids.cf2 ))

networks: (( merge || default_networks ))

resource_pools:
  - name: small_z1
    cloud_properties:
      instance_type: m1.small
      availability_zone: (( meta.zones.z1 ))

  - name: small_z2
    cloud_properties:
      instance_type: m1.small
      availability_zone: (( meta.zones.z2 ))

  - name: medium_z1
    cloud_properties:
      instance_type: m3.medium
      availability_zone: (( meta.zones.z1 ))
      spot_bid_price: (( properties.template_only.aws.spot_bid_prices.m3_medium ))

  - name: medium_z2
    cloud_properties:
      instance_type: m3.medium
      availability_zone: (( meta.zones.z2 ))
      spot_bid_price: (( properties.template_only.aws.spot_bid_prices.m3_medium ))

  - name: large_z1
    cloud_properties:
      instance_type: m3.large
      availability_zone: (( meta.zones.z1 ))
      spot_bid_price: (( properties.template_only.aws.spot_bid_prices.m3_large ))

  - name: large_z2
    cloud_properties:
      instance_type: m3.large
      availability_zone: (( meta.zones.z2 ))
      spot_bid_price: (( properties.template_only.aws.spot_bid_prices.m3_large ))

  - name: runner_z1
    cloud_properties:
      instance_type: m1.xlarge
      availability_zone: (( meta.zones.z1 ))
      spot_bid_price: (( properties.template_only.aws.spot_bid_prices.m1_xlarge ))

  - name: runner_z2
    cloud_properties:
      instance_type: m1.xlarge
      availability_zone: (( meta.zones.z2 ))
      spot_bid_price: (( properties.template_only.aws.spot_bid_prices.m1_xlarge ))

  - name: router_z1
    cloud_properties:
      instance_type: m3.medium
      availability_zone: (( meta.zones.z1 ))
      spot_bid_price: (( properties.template_only.aws.spot_bid_prices.m3_medium ))

  - name: router_z2
    cloud_properties:
      instance_type: m3.medium
      availability_zone: (( meta.zones.z2 ))
      spot_bid_price: (( properties.template_only.aws.spot_bid_prices.m3_medium ))

  - name: small_errand
    cloud_properties:
      instance_type: m1.small
      availability_zone: (( meta.zones.z1 ))


# set up static IPs
jobs:

  - name: ha_proxy_z1
    instances: 1
    networks:
      - name: cf1_public
        static_ips: (( static_ips(1) ))
        default: 
        - dns
        - gateway
      - name: floating
        static_ips: ~

  - name: ha_proxy_z2
    instances: 0
    networks:
      - name: cf2_public
        static_ips: (( static_ips(1) ))
        default: 
        - dns
        - gateway
      - name: floating
        static_ips: ~

  - name: logs_z1
    instances: 0
    networks:
      - name: cf1
        static_ips: (( static_ips(0) ))

  - name: logs_z2
    instances: 0
    networks:
      - name: cf2
        static_ips: (( static_ips(0) ))

  - name: nats_z1
    instances: 0
    networks:
      - name: cf1
        static_ips: (( static_ips(1) ))

  - name: nats_z2
    instances: 1
    networks:
      - name: cf2
        static_ips: (( static_ips(1) ))

  - name: router_z1
    instances: 1
    networks:
      - name: cf1
        static_ips: (( static_ips(5, 6, 15, 16, 17, 18, 19, 20) ))

  - name: router_z2
    instances: 1
    networks:
      - name: cf2
        static_ips: (( static_ips(5, 6, 15, 16, 17, 18, 19, 20) ))

  - name: loggregator_z1
    instances: 2
    networks:
      - name: cf1
        static_ips: (( static_ips(21, 22) ))

  - name: loggregator_z2
    instances: 2
    networks:
      - name: cf2
        static_ips: (( static_ips(21, 22) ))

  - name: loggregator_trafficcontroller_z1
    instances: 1
    networks:
      - name: cf1
        static_ips: (( static_ips(24) ))

  - name: loggregator_trafficcontroller_z2
    instances: 1
    networks:
      - name: cf2
        static_ips: (( static_ips(24) ))

  - name: etcd_z1
    instances: 2
    networks:
      - name: cf1
        static_ips: (( static_ips(10, 25) ))

  - name: etcd_z2
    instances: 1
    networks:
      - name: cf2
        static_ips: (( static_ips(9) ))

 # SPOFs
  - name: postgres_z1
    instances: 1
    networks:
    - name: cf1
      static_ips: (( static_ips(7) ))
